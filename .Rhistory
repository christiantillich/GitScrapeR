,body         = x$body
,closed_at    = coalesce(x$closed_at, "", null.func=is.null)
,comments     = x$comments
,comments_url = x$comments_url
) %>% return
}
issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
head(issues)
var.sum(issues)
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
source('issues.db.R')
################################ END HEADER ##################################
qplot(
as.Date(created_at)
,fill = state
,data = issues
) + theme_BA
issues.opened <- issues %>%
group_by(date = as.Date(created_at)) %>%
summarize(opened = length(id)) %>%
as.data.frame
issues.closed <-issues %>%
filter(!is.na(closed_at)) %>%
group_by(date = as.Date(closed_at)) %>%
summarize(closed = length(id)) %>%
as.data.frame
df <- merge(issues.opened, issues.closed, all = T) %>%
mutate(
opened = ifelse(is.na(opened),0,opened)
,closed = ifelse(is.na(closed),0,closed)
,cumulative_opened = cumsum(opened)
,cumulative_closed = cumsum(closed)
,active = cumulative_opened - cumulative_closed
) %>% as.data.frame
qplot(
date
,cumulative_closed
,geom="line"
,color=I("red")
,data=df
,main = "Issues - Open vs. Closed"
,size=I(1.1)
) + geom_line(aes(y=cumulative_opened),color="darkolivegreen4", size=I(1.1)) +
theme_BA
qplot(
date
,active
,geom="line"
,data=df
,main = "Active Issues"
,size = I(1.1)
) + theme_BA
issues.opened <- issues %>%
group_by(date = as.Date(created_at)) %>%
summarize(opened = length(id)) %>%
as.data.frame
head(issues.opened)
issues.closed <-issues %>%
filter(!is.na(closed_at)) %>%
group_by(date = as.Date(closed_at)) %>%
summarize(closed = length(id)) %>%
as.data.frame
head(issues)
issues %>%
filter(!is.na(closed_at))
require(magrittr)
issues %>%
group_by(date = as.Date(created_at)) %>%
summarize(opened = length(id)) %>%
as.data.frame
issues %>%
filter(!is.na(closed_at)) %>%
group_by(date = as.Date(closed_at)) %>%
summarize(closed = length(id)) %>%
as.data.frame
colnames(issues)
issues$closed_at
issues %>%
filter(!is.na(closed_at))
require(dplyr)
issues %>%
filter(!is.na(closed_at)) %>%
group_by(date = as.Date(closed_at)) %>%
summarize(closed = length(id)) %>%
as.data.frame
issues.opened <- issues %>%
group_by(date = as.Date(created_at)) %>%
summarize(opened = length(id)) %>%
as.data.frame
issues.opened
var.sum(issues)
issues %>%
filter(!is.na(closed_at))
issues
issues$closed_at
issues %>% select(closed_at)
issues %>% filter(is.na(closed_at))
issues %>% filter(closed_at > 1)
issues %>% filter(.,closed_at > 1)
issues %>% filter(id > 1)
issues$id
library(dplyr)
issues %>%
filter(!is.na(closed_at))
issues %>%
#filter(!is.na(closed_at)) %>%
group_by(date = as.Date(closed_at)) %>%
summarize(closed = length(id)) %>%
as.data.frame
?filter
reload(dplyr)
library(dplyr)
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
source('get.git.R')
################################ END HEADER ##################################
code.db <- function(path,.tail = '/contents'){
#Grab the top level directory for the repo.
dir <- show.github.path(paste0(path,.tail))
#Parsing function for an element.
content.parse <- function(x){
# print(c(path, x$name))
#If element is a file, return a single-row data frame containing the parsed contents.
if(x$type == "file"){
y <- data.frame(
name            = x$name         %>% as.character %||% ""
,type            = x$type         %>% as.character %||% "err"
,sha             = x$sha          %>% as.character %||% ""
,size            = x$size         %>% as.integer   %||% 0
,url             = x$url          %>% as.character %||% ""
,html_url        = x$html_url     %>% as.character %||% ""
,git_url         = x$git_url      %>% as.character %||% ""
,download_url    = x$download_url %>% as.character %||% ""
)
y$code <-
x$download_url %>%
gsub('https://raw.githubusercontent.com/','',.) %>%
get.git(.)
}
#If element is a directory, recursively call function, returning many-row data frame.
if(x$type == "dir"){
y <- x$url %>%
gsub('https://api.github.com/','', .) %>%
gsub('\\?ref=master','',.) %>%
code.db(.,.tail="")
}
return(y)
}
#Apply parsing function to every element in dir, and collapse to single frame.
lapply(dir, content.parse) %>%
do.call(rbind,.) %>%
lapply(function(x) if(class(x) == "factor") {as.character(x)} else{x}) %>%
as.data.frame(., stringsAsFactors=F) %>%
return
#Return data frame.
}
#User inputs target path.
# test <- code.db("repos/robertzk/3chessengine")
# test %>% var.sum
# test %>% head
# test <- code.db('')
test <- code.db("repos/robertzk/3chessengine")
head(test)
show.github.path('repos/analytics-partners')
show.github.path('orgs/analytics-partners')
show.github.path('orgs/avant')
show.github.path('orgs/avant/repos/analytics-partners')
show.github.path('orgs/avant/repos')
show.github.path('orgs/avantcredit/repos')
show.github.path('orgs/avantcredit/repos/analytics-partners')
show.github.path('orgs/avantcredit/repos/avant')
show.github.path('orgs/avantcredit/repos/')
show.github.path('orgs/avantcredit/repos')
show.github.path('orgs/avantcredit/repos') %>% name.search()
show.github.path('orgs/avantcredit/repos') %>% unlist
(show.github.path('orgs/avantcredit/repos') %>% unlist)$name
show.github.path('orgs/avantcredit/repos') %>% unlist %>% names
show.github.path('orgs/avantcredit/repos') %>% unlist %>% names %>% unique
show.github.path('orgs/avantcredit/repos') %>% unlist %>% ["name"]
?[]
?[
?`[`
show.github.path('orgs/avantcredit/repos') %>% unlist %>% ["name"] %>% function(x) x$name
show.github.path('orgs/avantcredit/repos') %>% unlist %>% function(x) x$name
show.github.path('orgs/avantcredit/repos') %>% unlist %>% (function(x) x$name)(.)
show.github.path('orgs/avantcredit/repos') %>% unlist %>% (function(x) x['name'])(.)
show.github.path('orgs/avantcredit/repos') %>% length()
show.github.path('orgs/avantcredit/repos') %>% unlist %>% as.data.frame
show.github.path('orgs/avantcredit/repos') %>% unlist
show.github.path('orgs/avantcredit/repos')[1]
show.github.path('orgs/avantcredit/repos')[1] %>% name.search()
show.github.path('orgs/avantcredit/repos')[1] %>% name.search
show.github.path('orgs/avantcredit/repos')[[1]] %>% name.search
sapply(show.github.path('orgs/avantcredit/repos'), function(x) x['name'])
sapply(show.github.path('orgs/avantcredit/repos'), function(x) x[['name']])
look.for <- function(list, target){
sapply(list, function(x) x[['name']])
}
look.for(show.github.path('orgs/avantcredit/repos'), 'name')
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
################################ END HEADER ##################################
url <- "repos/avantcredit/analytics-partners/issues?state=all"
#Parse each issue
issue.parse <- function(x) {
data.frame(
id           = gsub("\\D+","",x$url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,state        = x$state
,body         = x$body
,closed_at    = coalesce(x$closed_at, "", null.func=is.null)
,comments     = x$comments
,comments_url = x$comments_url
) %>% return
}
issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
#Parse each comment.
comment.parse <- function(x) {
data.frame(
id           = x$id
,issue_id     = gsub("\\D+","",x$issue_url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,issue_url    = x$issue_url
,body         = x$body
)
}
comments <- sapply(issues$comments_url, show.github.path, USE.NAMES=F) %>%
unlist(recursive=F) %>%
lapply(comment.parse) %>%
do.call(rbind,.) %>%
mutate(body = as.character(body))
#If you want to view all the comments a little more neatly:
#for(i in comments$body) print(i)
show.github.path(url)
sapply(issues$comments_url, show.github.path, USE.NAMES=F)
show.github.path(url)
show.github.path(url) %>%
lapply(issue.parse)
issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
head(issues)
colnames(issues)
sapply(issues$comments_url, show.github.path, USE.NAMES=F)
head(issues)
issues$comments_url
issues$comments_url %>%
gsub('https://api.github.com/','',.) %>%
sapply(show.github.path, USE.NAMES=F)
comments <- issues$comments_url %>%
gsub('https://api.github.com/','',.) %>%
sapply(show.github.path, USE.NAMES=F) %>%
unlist(recursive=F) %>%
lapply(comment.parse) %>%
do.call(rbind,.) %>%
mutate(body = as.character(body))
head(comments)
code.db('orgs/avantcredit/repos/analytics-partners')
show.github.path('orgs')
show.github.path('orgs/avantcredit')
show.github.path('orgs/avantcredit/repos')
show.github.path('repos/avantcredit/analytics-partners')
show.github.path('repos/avantcredit/analytics-partners')
code.db('repos/avantcredit/analytics-partners')
files <- code.db(url)
url <- 'repos/avantcredit/analytics-partners'
files <- code.db(url)
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
source('code.db.R')
################################ END HEADER ##################################
url <- 'repos/avantcredit/analytics-partners'
regex <- ''
#Build the code.db from the url
files <- code.db(url)
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
source('code.db.R')
################################ END HEADER ##################################
url <- 'repos/avantcredit/analytics-partners'
regex <- ''
#Build the code.db from the url
files <- code.db(url)
#Return each file where the code matches the regex pattern.
################################### HEADER ###################################
lib <- paste0(path.projects,"/Data_Sci/Github_Scraper")
setwd(lib)
source('show.github.path.R')
source('code.db.R')
################################ END HEADER ##################################
url <- 'repos/avantcredit/analytics-partners'
regex <- ''
#Build the code.db from the url
files <- code.db(url)
#Return each file where the code matches the regex pattern.
head(files)
colnames(files)
files$name
grep(files$name,'.R')
sapply(files$name, grep('.R'))
sapply(files$name, grep('.R',.))
files$name %>% class
grep('.R', files$name)
files[grep('.R', files$name)]
files[grep('.R', files$name),]
files[grep('.R', files$name),]$name
regex <- ''
file.type <- '.R'
files %>%
filter(
grepl(paste0(file.type,'$'),name )
,grepl(regex,code)
) %>% select(name)
regex <- 'select'
files %>%
filter(
grepl(paste0(file.type,'$'),name )
,grepl(regex,code)
) %>% select(name)
?grep
print(paste("Scanning",url,"... \n Please be patient!")
)
print(paste("Scanning",url,"...
Please be patient!"))
print(paste("Scanning",url,"/...  Please be patient!"))
message(paste("Scanning",url,"/...  Please be patient!"))
?message
message("Scan Complete!")
?grep
#Return each file where the code matches the regex pattern.
files %>%
filter(
grepl(paste0(file.type,'$'),name )
,grepl(regex,code)
) %>%
transmute(
code = grep(regex,code)
) %>%
select(name,code)
files %>%
filter(
grepl(paste0(file.type,'$'),name )
,grepl(regex,code)
) %>%
transmute(
code = grep(regex,code)
)
files %>%
filter(
grepl(paste0(file.type,'$'),name )
,grepl(regex,code)
) %>%
mutate(
code = grep(regex,code,value=T)
) %>%
select(name,code)
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
code = grep(regex,code,value=T)
) %>% head
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
#   mutate(
#     code = grep(regex,code,value=T)
#   ) %>%
select(name,code) %>% head
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = grep(regex,code,value=T)
) %>%
select(name,test) %>% head
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = grep(regex,code)
) %>%
select(name,test) %>% head
files <- files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
)
files
head(files$name)
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = grep(regex,code)
) %>%
select(name,test) %>% head
grep(regex, files$code )
sapply(files$code, function(x) grep(regex,x))
sapply(files$code, function(x) grep(regex,x,value=TRUE))
sapply(files$code, function(x) grep(regex,x))
files$code[[1]]
grep('select',files$code[[1]])
grep('select',files$code[[1]],ignore.case=T)
grepl('select',files$code[[1]],ignore.case=T)
regexpr('select',files$code[[1]],ignore.case=T)
regexpr('select',files$code[[1]],ignore.case=T)[1]
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = regexp(regex,code,ignore.case=T)[1]
) %>%
select(name,test) %>% head
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = regexpr(regex,code,ignore.case=T)[1]
) %>%
select(name,test) %>% head
files$code[[1]][1:30]
substring(files$code[[1]], 1:20)
substring(files$code[[1]], 1, 20)
substring(files$code[[1]], 500, 600)
substring(files$code[[6]], 500, 600)
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = regexpr(regex,code,ignore.case=T)[1]
) %>%
select(name,test) %>% head
regexpr(regex, files$code[[6]])
substring(files$code, 200, 300)
substr(files$code, 200, 300)
substr(files$code[[6]], 200, 300)
sapply(files$code, function(x) regexpr(regex, x, ignore.case=T)[[1]])
sapply(files$code, function(x) regexpr(regex, x, ignore.case=T)[1]])
sapply(files$code, function(x) regexpr(regex, x, ignore.case=T)[1])
sapply(files$code, function(x) regexpr(regex, x, ignore.case=T)[1], USE.NAMES=F)
#Return each file where the code matches the regex pattern.
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
test = sapply(code, function(x) regexpr(regex, x, ignore.case=T)[1], USE.NAMES=F)
) %>%
select(name,test) %>% head
substr(files$code[[2]], 2200, 2300)
files %>%
filter(
grepl(paste0(file.type,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
loc = sapply(code, function(x) regexpr(regex, x, ignore.case=T)[1], USE.NAMES=F)
,code = paste0("...",substr(code, loc - 50, loc + 60),"...")
) %>%
select(name,code) %>% head

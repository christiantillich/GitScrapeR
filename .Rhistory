setwd("~/GitR")
package.skeleton('GitR')
traceback()
show.github.path <- function(url,two.fac=0){
thing <- GET(
paste("https://api.github.com/",url,sep="")
,authenticate(getOption("GITHUB_USER"), getOption("GITHUB_TOKEN"))
,add_headers("X-GitHub-OTP" = two.fac)
)
content(thing)
}
show.github.path("user")
library('curl')
library('jsonlite')
library('httpuv')
library('httr')
library('dplyr')
show.github.path("user")
show.github.path("issues")
show.github.path("user/issues")
show.github.path("user/repos")
library(AnaliTools)
show.github.path("user/repos") %>% look.for('name')
show.github.path("orgs/avantcredit/issues")
show.github.path("orgs/avantcredit/issues")
show.github.path("orgs/avantcredit/issues")
show.github.path("orgs/avantcredit/issues")
show.github.path("user/issues")
show.github.path("orgs/avantcredit/issues")
show.github.path('repos/analytics-partners/issues')
show.github.path('orgs/avantcredit/analytics-partners/issues')
show.github.path('orgs/avantcredit')
show.github.path('orgs/avantcredit/analytics-partners')
show.github.path("orgs/avantcredit/issues")
show.github.path('orgs/avantcredit/analytics-partners')
show.github.path('orgs/avantcredit/analytics-partners')
show.github.path('orgs/avantcredit')
show.github.path('orgs/avantcredit/repos')
show.github.path('orgs/avantcredit/repos') %>% look.for('name')
getOption("GITHUB_USER")
show.github.path('user/christiantillich/repos')
show.github.path('user')
show.github.path('user/repos')
show.github.path('user/repos') %>% look.for('name')
show.github.path('user/orgs')
show.github.path('user/orgs')[[1]]
show.github.path('user/orgs/avantcredit')
show.github.path('avantcredit')
show.github.path('orgs/avantcredit')
show.github.path('orgs/avantcredit/repos') %>% look.for('name')
show.github.path('repos/avantanalytics')
show.github.path('repos/avantanalytics/analytics-partners')
show.github.path("orgs/avantcredit/issues")
show.github.path("issues")
show.github.path("user")
show.github.path('repos/avantcredit/analytics-partners')
show.github.path('repos/avantcredit/analytics-partners') %>% look.for('name')
show.github.path('repos/avantcredit/analytics-partners/issues')
list()
repo.path <- "repos/avantcredit/analytics-partners"
url <- paste(repo.path, 'issues?state=all', sep="/")
show.github.path(url)
out <- list()
out$issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
issue.parse <- function(x) {
data.frame(
id           = gsub("\\D+","",x$url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,state        = x$state
,body         = x$body
,closed_at    = coalesce(x$closed_at, "", null.func=is.null)
,comments     = x$comments
,comments_url = x$comments_url
) %>% return
}
#Parse each comment.
comment.parse <- function(x) {
data.frame(
id           = x$id
,issue_id     = gsub("\\D+","",x$issue_url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,issue_url    = x$issue_url
,body         = x$body
)
}
out$issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
url <- paste(repo.path, 'issues?state=all', sep="/")
#Parse each issue
issue.parse <- function(x) {
data.frame(
id           = gsub("\\D+","",x$url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,state        = x$state
,body         = x$body
,closed_at    = x$closed_at %||% ""
,comments     = x$comments
,comments_url = x$comments_url
) %>% return
}
out$issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
out$issues
out$issues$comments_url
out$comments <- out$issues$comments_url %>%
gsub('https://api.github.com/','',.) %>%
sapply(show.github.path, USE.NAMES=F) %>%
unlist(recursive=F) %>%
lapply(comment.parse) %>%
do.call(rbind,.) %>%
mutate(body = as.character(body))
issues.db <- function(repo.path){
url <- paste(repo.path, 'issues?state=all', sep="/")
#Parse each issue
issue.parse <- function(x) {
data.frame(
id           = gsub("\\D+","",x$url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,state        = x$state
,body         = x$body
,closed_at    = x$closed_at %||% ""
,comments     = x$comments
,comments_url = x$comments_url
) %>% return
}
#Parse each comment.
comment.parse <- function(x) {
data.frame(
id           = x$id
,issue_id     = gsub("\\D+","",x$issue_url)
,author       = x$user$login
,created_at   = x$created_at
,url          = x$url
,issue_url    = x$issue_url
,body         = x$body
)
}
out <- list()
out$issues <- show.github.path(url) %>%
lapply(issue.parse) %>%
do.call(rbind,.) %>%
mutate(
comments_url = as.character(comments_url)
,created_at = as.Date(created_at)
,closed_at =  as.Date(gsub('^$',NA,as.character(closed_at)))
)
out$comments <- out$issues$comments_url %>%
gsub('https://api.github.com/','',.) %>%
sapply(show.github.path, USE.NAMES=F) %>%
unlist(recursive=F) %>%
lapply(comment.parse) %>%
do.call(rbind,.) %>%
mutate(body = as.character(body))
return(out)
}
issues.db("repos/avantcredit/analytics-partners")
issues.db("repos/avantcredit/analytics-partners")$issues
issues.db("repos/avantcredit/analytics-partners") %>% attributes
show.github.path('users/peterhurford')
show.github.path('users/peterhurford') %>% class
show.github.path <- function(
path,
two.fac=0,
user = getOption("GITHUB_USER"),
pwd = getOption("GITHUB_TOKEN")
){
thing <- GET(
paste("https://api.github.com/",path,sep="")
,authenticate(user,pwd)
,add_headers("X-GitHub-OTP" = two.fac)
)
content(thing)
}
show.github.path('repos/avantcredit/analytics-partners/issues')
search.repo('repos/robertzk/3chessengine','rook')
search.repo <- function(path, regex=".", name.regex='\\..+',verbose=F){
#Build the code.db from the path
message(paste("Scanning",path,"/...  Please be patient!"))
files <- code.db(path,verbose=verbose)
message("Scan Complete!")
#Return each file where the code matches the regex pattern.
files %>%
filter(
grepl(paste0(name.regex,'$'),name,ignore.case=T)
,grepl(regex,code,ignore.case=T)
) %>%
mutate(
loc = sapply(code, function(x) regexpr(regex, x, ignore.case=T)[1], USE.NAMES=F)
,code = paste0("..." ,substring(code, try(loc - 25,T), try(loc + 25,T)),"...")
) %>%
select(name,code)
}
search.repo('repos/robertzk/3chessengine','rook')
code.db <- function(path,.tail = '/contents',verbose=F){
#Grab the top level directory for the repo.
dir <- show.github.path(paste0(path,.tail))
#Parsing function for an element.
content.parse <- function(x){
#Toggle for troubleshooting.
if(verbose) {message(c(path,'/', x$name))}
#If element is a file, return a single-row data frame containing the parsed contents.
if(x$type == "file"){
y <- data.frame(
name            = x$name         %>% as.character %||% ""
,type            = x$type         %>% as.character %||% "err"
,sha             = x$sha          %>% as.character %||% ""
,size            = x$size         %>% as.integer   %||% 0
,url             = x$url          %>% as.character %||% ""
,html_url        = x$html_url     %>% as.character %||% ""
,git_url         = x$git_url      %>% as.character %||% ""
,download_url    = x$download_url %>% as.character %||% ""
)
#Pull the code if it's an eligible file type.
eligible <- !grepl('\\.png$',x$name) &
!grepl('\\.jpg$',x$name) &
!grepl('\\.gif$',x$name)
if(eligible){
y$code <-
x$download_url %>%
gsub('https://raw.githubusercontent.com/','',.) %>%
get.git(.)
}else{y$code <- NA}
}
#If element is a directory, recursively call function, returning many-row data frame.
if(x$type == "dir"){
y <- x$url %>%
gsub('https://api.github.com/','', .) %>%
gsub('\\?ref=master','',.) %>%
code.db(.,.tail="",verbose=verbose)
}
return(y)
}
#Apply parsing function to every element in dir, and collapse to single frame.
lapply(dir, content.parse) %>%
do.call(rbind,.) %>%
lapply(function(x) if(class(x) == "factor") {as.character(x)} else{x}) %>%
as.data.frame(., stringsAsFactors=F) %>%
return
#Return data frame.
}
#User inputs target path.
# test <- code.db("repos/robertzk/3chessengine")
# test %>% var.sum
# test %>% head
# test <- code.db('repos/analyitic')
search.repo('repos/robertzk/3chessengine','rook')
get.git <- function(path,two.fac=0){
#Main API call.
thing <- GET(
paste("https://raw.githubusercontent.com/",path,sep="")
,authenticate(GITHUB_USER, GITHUB_TOKEN)
,add_headers("X-GitHub-OTP" = two.fac)
)
#Sanitize the output. Needs to be text and should not be some kind of vector.
content(thing) %>%
as.character %||%
"" %>%
paste(collapse = " ")
}
search.repo('repos/robertzk/3chessengine','rook')
get.git <- function(
path,
two.fac=0,
user = getOption("GITHUB_USER"),
pwd = getOption("GITHUB_TOKEN")
){
#Main API call.
thing <- GET(
paste("https://raw.githubusercontent.com/",path,sep="")
,authenticate(GITHUB_USER, GITHUB_TOKEN)
,add_headers("X-GitHub-OTP" = two.fac)
)
#Sanitize the output. Needs to be text and should not be some kind of vector.
content(thing) %>%
as.character %||%
"" %>%
paste(collapse = " ")
}
search.repo('repos/robertzk/3chessengine','rook')
#' get.git
#' @description Function returns the raw-text code in a specific GitHub file.
#' @param path - The raw.githubusercontent.com path to the file. Should be similar
#' to the path used by api.github.com
#' @return Function returns the code as a character string
#' @export
#' @examples get.git("robertzk/3chessengine/master/.gitignore")
#' get.git("robertzk/3chessengine/master/README.md")
#' get.git("robertzk/3chessengine/master/bower.json")
get.git <- function(
path,
two.fac=0,
user = getOption("GITHUB_USER"),
pwd = getOption("GITHUB_TOKEN")
){
#Main API call.
thing <- GET(
paste("https://raw.githubusercontent.com/",path,sep="")
,authenticate(user, pwd)
,add_headers("X-GitHub-OTP" = two.fac)
)
#Sanitize the output. Needs to be text and should not be some kind of vector.
content(thing) %>%
as.character %||%
"" %>%
paste(collapse = " ")
}
search.repo('repos/robertzk/3chessengine','rook')
search.repo('repos/robertzk/3chessengine',"var [A-Za-z, ]+",name.regex=".js")
search.repo('repos/avantcredit/analytics-partners','select','.R$',verbose=T)
?GET
?content
library(GitScrapeR)
library(curl)
show.github.path <- function(
path,
two.fac=0,
user = getOption("GITHUB_USER"),
pwd = getOption("GITHUB_TOKEN")
){
thing <- GET(
paste("https://api.github.com/",path,sep="")
,authenticate(user,pwd)
,add_headers("X-GitHub-OTP" = two.fac)
)
content(thing)
}
show.github.path("user")
library('curl')
library('httr')
library('magrittr')
show.github.path <- function(
path,
two.fac=0,
user = getOption("GITHUB_USER"),
pwd = getOption("GITHUB_TOKEN")
){
thing <- GET(
paste("https://api.github.com/",path,sep="")
,authenticate(user,pwd)
,add_headers("X-GitHub-OTP" = two.fac)
)
content(thing)
}
show.github.path('repos/avantcredit/analytics-partners/issues')
?content
library(GitScrapeR)
